#!/usr/bin/env bash

POTATO_API=3

# Path to this file
export POTATO_CORE

# Path to the root of loaded application
export POTATO_ROOT

declare -A POTATO_INFO

function __load() {
	for arg in $@; do
		shift
		case $arg in
			'--ac'|'--setup-autocomplete')
				echo 'Setting up autcomplete for '$1
				local appid=$1
				potato_load_app $appid
				potato_setup_autocomplete
				shift
			;;
			'--exec')
				potato_load_app
				potato_exec
			;;
		esac
	done
	POTATO_CORE=$BASH_SOURCE
	POTATO_DEBUG=${POTATO_DEBUG:-''}
	POTATO_DEBUG_VERBOSE=${POTATO_DEBUG_VERBOSE:-''}
}

###
# potato_load_app will load an app by either path or name
function potato_load_app() {
	local appid=${1:-$0}
	if [ ! -z $(potato_app_get 'root' $appid) ]; then
		POTATO_THIS_APP=$appid
		return
	fi
	local approot=$(dirname $(whereis_realpath "$appid"))
	if [ -d $approot ]; then
		potato_load_app_by_path $approot
		POTATO_THIS_APP=$POTATO_APP_NAME
		return
	fi
	return 1
}

# Load or re-load the app by its path
function potato_load_app_by_path() {
	local approot=$1
	[ -e $approot'/.potatorc' ] && . $approot'/.potatorc'
	POTATO_APP_NAME=${POTATO_APP_NAME:-'LOADED'}
	potato_app_set $POTATO_APP_NAME 'root' $approot
	potato_app_set $POTATO_APP_NAME 'default_id' ${POTATO_DEFAULT_ID:-'me'}
	potato_app_set $POTATO_APP_NAME 'default_task' ${POTATO_DEFAULT_TASK:-'main'}
	potato_app_set $POTATO_APP_NAME 'pattern' ${POTATO_TASK_PATH_PATTERN:-'_{{task}}'}
	# allow for `source`-ing local files
	PATH="$approot:$PATH"
}

# deprecated in API 3. Simply use `source`
function potato_include() {
	source "$@"
}

function potato_debug() {
	local __line_number=$BASH_LINENO
 	local __func_name=${FUNCNAME[1]}
 	local __source=$(basename ${BASH_SOURCE[1]})
	local prefix="[DEBUG $__func_name() in $__source:$__line_number] "
	echo '#[ DEBUG ]##########:'${1:-''}
	echo "|_ $__source:$__line_number"
	for i in ${!FUNCNAME[*]}; do
		let last=${#FUNCNAME[*]}-1
		[ $i -eq $last ] && continue
		printf '  |-> %-20s @ %-4s:%s\n' ${FUNCNAME[$i]}'()' ${BASH_SOURCE[$i+1]} ${BASH_LINENO[$i]}
	done
	return 0
}

function potato_process_input_args() {
	declare -a args=()
	for arg in "${BASH_ARGV[@]}"; do
		args=( "$arg" "${args[@]}" )
	done

	set -- "${args[@]}"

	POTATO_THIS_ID=$(potato_app_get 'default_id')
	POTATO_THIS_TASK=$(potato_app_get 'default_task')
	if [ -f $(potato_task_path $1) ]; then
		POTATO_THIS_TASK="$1"
		POTATO_THIS_ARGS=("${@:2}")
	elif [ "$#" -gt "1" ] && [ -f $(potato_task_path $2) ]; then
		POTATO_THIS_ID=$1
		POTATO_THIS_TASK=$2
		POTATO_THIS_ARGS=("${@:3}")
	else
		POTATO_THIS_ARGS=("${@:1}")
	fi
}

function potato_task_path() {
	local task=$1
	[ "$task" = '--' ] && task=$(potato_app_get 'default_task')
	# check if it's a valid task first
	# not a valid task if it contains '/'
	[[ "$task" == *'/'* ]] && echo '/dev/null' && return 1
	local approot=$(potato_app_get 'root')
	local appname=$POTATO_APP_NAME
	local path=$(sed "s/__TASK__/$task/g;s/__APP__/$appname/g" <<< $(potato_app_get 'pattern'))
	echo "$approot/$path"
}

function potato_tasks_list() {
	local pattern=$(potato_task_path '*')
	for pathname in $pattern; do
		[[ $pathname =~ ${pattern//\*/\(\.\*\)} ]] && echo ${BASH_REMATCH[1]}
	done
}

function print_r() {
	local array_name=$1
	# Copyright https://stackoverflow.com/a/1612144
	# Copyright https://unix.stackexchange.com/a/366621
	typeset -p $array_name | sed s/^.*\(// | tr -d ")\'\""  | tr "[" "\n" | sed s/]=/'='/ | grep -v -e '^$'
}

function potato_app_get() {
	local key=$1
	local appname=${2:-$POTATO_APP_NAME}
	echo ${POTATO_INFO["${appname}_${key}"]}
}
function potato_app_set() {
	local appname=$1
	local key=$2
	local value=$3
	local default=${4:-''}
	POTATO_INFO["${appname}_${key}"]=${value:-$default}
}

function potato_info() {
	echo '(to cancle unset POTATO_PRINT_INFO)'
	echo "ID: 	"$POTATO_THIS_ID
	echo "TASK:	"$POTATO_THIS_TASK
	declare -p POTATO_APP_NAME
	declare -p POTATO_THIS_ARGS
	declare -p POTATO_INFO
}

function potato_load_task() {
	local path=$(potato_task_path $1)
	[ ! -f $path ] && potato_debug "Failed to load $path" && return 1
	POTATO_SKIP_LOAD=1 . $BASH_SOURCE	# unsets functions set by previousely loaded task
	. $path
}

function potato_run_task() {
	potato_load_task $1 || return 1
	shift
	run "$@"
}

function potato_exec() {
	potato_process_input_args
	test "$POTATO_PRINT_INFO" && potato_info && return
	potato_run_task $POTATO_THIS_TASK "${POTATO_THIS_ARGS[@]}"
}

function run() {
	potato_debug 'ERROR You need to implement run() in '$(potato_task_path $POTATO_THIS_TASK)
}

function potato_input() {
	local message;
	[ -z "$1" ] && message="" || message="$1"
	local default;
  [ -z "$2" ] && default="" || default="$2"
	read -p "$message" value
	[ -z "$value" ] && value=$default
	echo $value
}

function potato_setup_autocomplete {
	complete -o nospace -F _potato_setup_autocomplete $POTATO_APP_NAME
}

POTATO_AUTOCOMPLETE_DEFAULT='default'

# Copyright https://askubuntu.com/a/483149
_potato_setup_autocomplete()
{
	local app_name=$1
	local last_arg=$2
	potato_load_app $app_name

	COMPREPLY=()
	local depth=${#COMP_WORDS[@]}
	if [ "$depth" -eq 2 ]; then
		local list=$(potato_tasks_list)
	  COMPREPLY=( $(compgen -W "$list" -- ${COMP_WORDS[COMP_CWORD]}) )
	elif [ "${depth}" -gt 2 ]; then
		local task=${COMP_WORDS[1]}
		potato_silent potato_load_task $task || return 1
		local list=$(__autocomplete $depth)
		if [ "$list" = "$POTATO_AUTOCOMPLETE_DEFAULT" ]; then
			COMPREPLY=( $(compgen -f ${COMP_WORDS[COMP_CWORD]}) )
		else
			COMPREPLY=( $(compgen -W "$list" -- ${COMP_WORDS[COMP_CWORD]}) )
		fi
	fi
  return 0
}

# Turns off debug and error reporting
function potato_silent {
	local cmd=$@
	POTATO_DEBUG_OLD=$POTATO_DEBUG
	POTATO_DEBUG=
	$@ 2>/dev/null
	res=$?
	POTATO_DEBUG=$POTATO_DEBUG_OLD
	return $res
}

function __autocomplete() {
	local depth=${1:-1}
	potato_comment "provide this function to allow autocompletion for arguments."
}
function __help() {
	potato_debug "provide this function in the task to enable task-specific help."
}

##
# @function whereis_realpath
# Cross-platform equivalent for realpath()
# Copyright http://stackoverflow.com/a/7400673/257479
myreadlink() { [ ! -h "$1" ] && echo "$1" || (local link="$(expr "$(command ls -ld -- "$1")" : '.*-> \(.*\)$')"; cd $(dirname $1); myreadlink "$link" | sed "s|^\([^/].*\)\$|$(dirname $1)/\1|"); }
whereis() { echo $1 | sed "s|^\([^/].*/.*\)|$(pwd)/\1|;s|^\([^/]*\)$|$(which -- $1)|;s|^$|$1|"; }
whereis_realpath() { local SCRIPT_PATH=$(whereis $1); myreadlink ${SCRIPT_PATH} | sed "s|^\([^/].*\)\$|$(dirname ${SCRIPT_PATH})/\1|"; }

[ -z "$POTATO_SKIP_LOAD" ] && __load
